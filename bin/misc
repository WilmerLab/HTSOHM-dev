import numpy as np
import os
from binning import *

p_dir = 'tgen1'
bins = bins
#bins <---input variable

#def calc_S(p_dir):

gp_dir = 'gen' + str(int(p_dir[-1]) - 1)

gp_S = np.load( gp_dir + '/s_file.npy' )

p_list = np.genfromtxt(p_dir + '/p_list.txt', usecols=0, dtype=str)

p_Xs = np.genfromtxt(p_dir + '/p_list.txt', usecols=1, dtype=str)
p_Ys = np.genfromtxt(p_dir + '/p_list.txt', usecols=2, dtype=str)
p_Zs = np.genfromtxt(p_dir + '/p_list.txt', usecols=3, dtype=str)

p_bins = []
for i in range( len(p_Xs) ):
    pos = [ int( p_Xs[i][1:-1] ),
            int( p_Ys[i][:-1] ),
            int( p_Zs[i][:-1] ) ]
    p_bins.append(pos)

gp_list = np.genfromtxt(gp_dir + '/p_list.txt', usecols=0, dtype=str)

gp_Xs = np.genfromtxt(gp_dir + '/p_list.txt', usecols=1, dtype=str)
gp_Ys = np.genfromtxt(gp_dir + '/p_list.txt', usecols=2, dtype=str)
gp_Zs = np.genfromtxt(gp_dir + '/p_list.txt', usecols=3, dtype=str)

gp_bins = []
for i in range( len(gp_Xs) ):
    pos = [ int( gp_Xs[i][1:-1] ),
            int( gp_Ys[i][:-1] ),
            int( gp_Zs[i][:-1] ) ]
    gp_bins.append(pos)

bin_list = []
for i in p_bins:
    if i in gp_bins:
        bin_list.append(i)
        
#print( bin_list ) 

dS_bins = []
for i in bin_list:
    if i not in dS_bins:
        dS_bins.append(i)
        
#print( dS_bins )

number = len( 
              np.genfromtxt(gp_dir + '/ch4_abs_cc_cc.txt',
                            usecols=0,
                            dtype=str)
              )

counts, ID_array = bin3d(p_dir[1:], bins)

bin_counts = []

for i in dS_bins:
    
    p_bin = i
    
    p_count = counts[ i[0],
                      i[1],
                      i[2] ]
    
    c_bins = []
    c_counts = []
    
    for j in range( len(gp_bins) ):
        
        if p_bin == gp_bins[j]:
            
            ID = j + number
            child = 'MAT-' + str(ID)
            
            c_bin = find_bin(child, ID_array)
            
            if c_bin not in c_bins:
                c_bins.append(c_bin)
                
                count = int(counts[ bin_c[0],
                                    bin_c[1],
                                    bin_c[2] ])
                
                c_counts.append(count)
    
    p_data = [p_bin, p_count]
    c_data = [c_bins, c_counts]
    row = [p_data, c_data]
    bin_counts.append(row)

for i in bin_counts:
    
    p_bin = i[0][0]
    p_count = i[0][1]
    
    c_bins = i[1][0]
    c_counts = i[1][1]
    
#    print(c_counts)
    
    a = p_bin[0]
    b = p_bin[1]
    c = p_bin[2]
    
    S_0 = gp_S[a, b, c]
    
    if p_bin not in c_bins:
        gp_S[a, b, c] = 0.5 * S_0
        
    if p_bin in c_bins:
        
        if p_count < 1.1 * min(c_counts):
            gp_S[a, b, c] = 0.5 * S_0
        
        pos = c_bins.index(p_bin)
        val = 0
        for j in range( len(c_bins)):
            if j != pos:
                if c_counts[j] > val:
                    val = c_counts[j]
        
        if p_count >= 3 * val:
            gp_S[a, b, c] = 1.5 * S_0


print(gp_S)
#print(bin_counts)    
#print(p_bin, '\t', p_count)

#for i in range( len(c_bins)):
#    print(c_bins[i], '\t', c_counts[i])
            
    
        


   #########################################################################################

n_gp = len(gp_list)

n_lib = len( np.genfromtxt(p_dir + '/ch4_abs_cc_cc.txt',
                           usecols=0, dtype=str) )
n_last = len( np.genfromtxt(gp_dir + '/ch4_abs_cc_cc.txt',
                            usecols=0, dtype=str) )

bin_children = []

for i in dS_bins:
    loc = i
    print(loc)
    
    children = []
    for j in range(n_gp):
        if gp_bins[j] == loc:
            print(j)
            children.append( gp_list[j] )
            print( gp_list[j] )
            
    row = [ loc, children ]
    bin_children.append(row)
    
#print(bin_children)
print( gp_list )       
    
#gp_s = np.genfromtxt(gp_dir + '/s_list.txt')

#s_file = open(os.path.abspath(p_dir) + '/s_list.txt', 'w')

#bin_list = []
#for i in p_bins:
#    if i in gp_bins:
#        if i not in bin_list:
#            bin_list.append(i)
            
#skip = len(gp_dir) + 1
#names = [x[0][skip:] for x in os.walk(gp_dir)][1:]
#n_gp = len(names)

#p_children = []

#for i in range(len(gp_list)):
#    if gp_bins[i] in bin_list:
#        p_children.append('MAT-' + str(i))

#p_ID_array = bin3d('tgen1,' bins)



