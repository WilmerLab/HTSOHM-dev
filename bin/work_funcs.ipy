import subprocess
import shlex
import numpy as np
import matplotlib.pyplot as plt


def cat_dirs(in1, in2, out):
    subprocess.call(shlex.split('./cat_dirs ' + in1
                                + ' ' + in2
                                + ' ' + out
                                ))


# concatenate datafiles, make directories, etc.

def pre_mut(d_new, start, lengt, d_old, d_out):
    %cd ~ / HTSOHM - 2.0 / data/
    subprocess.call(shlex.split('./pre_mut ' + d_new
                                + ' ' + str(start)
                                + ' ' + str(lengt)
                                + ' ' + d_old
                                + ' ' + d_out
                                ))
    %cd ~ / HTSOHM - 2.0/


# find missing datapoints

def FindMissing(dir, start, length):

    c = np.genfromtxt(dir + '/ch4_abs_cc_cc.txt', usecols=0, dtype=str)
    s = np.genfromtxt(dir + '/SAdata_m2_cc.txt', usecols=0, dtype=str)
    v = np.genfromtxt(dir + '/HVdata2col.txt', usecols=0, dtype=str)

    c_m = []
    s_m = []
    v_m = []
    for i in np.arange(start, start + length):
        mat = 'MAT-' + str(i)

        if mat not in c:
            c_m.append(mat)
        if mat not in s:
            s_m.append(mat)
        if mat not in v:
            v_m.append(mat)
#            print mat

    print('Missing data points\n')
    print('methane loading :   ', len(c_m))
    print(c_m, '\n')
    print('surface area    :   ', len(s_m))
    print(s_m, '\n')
    print('void fraction   :   ', len(v_m))
    print(v_m, '\n')
    print('--------------------\n')

    return c_m, s_m, v_m


# screen new generation

def screen(gen, length, start):

    %cd ~ / HTSOHM - 2.0 / bin/

    subprocess.call(shlex.split('./screen ' + gen
                                + ' ' + str(length)
                                + ' ' + str(start)
                                ))

    %cd ~ / HTSOHM - 2.0/


def test_plot(parent, current):

    c0 = np.genfromtxt(parent + '/ch4_abs_cc_cc.txt', usecols=1)
    s0 = np.genfromtxt(parent + '/SAdata_m2_cc.txt', usecols=1)
    v0 = np.genfromtxt(parent + '/HVdata2col.txt', usecols=1)

    c1 = np.genfromtxt(current + '/ch4_abs_cc_cc.txt', usecols=1)
    s1 = np.genfromtxt(current + '/SAdata_m2_cc.txt', usecols=1)
    v1 = np.genfromtxt(current + '/HVdata2col.txt', usecols=1)

    %matplotlib inline

    height = 6
    width = 12

    fig = plt.gcf()
    fig.set_size_inches(width, height)

    frame = plt.gca()
    fig.tight_layout()

    frm = plt.subplot(131)
    plt.scatter(v0, s0, color='k', edgecolor='none', s=5, alpha=0.8)
    plt.scatter(v1, s1, color='r', edgecolor='none', s=5, alpha=0.8)
    frame.axes.get_xaxis().set_ticklabels([])
    frame.axes.get_yaxis().set_ticklabels([])
    plt.xlim(0, 1)
    plt.ylim(0, 4000)

    frm = plt.subplot(132)
    plt.scatter(v0, c0, color='k', edgecolor='none', s=5, alpha=0.8)
    plt.scatter(v1, c1, color='r', edgecolor='none', s=5, alpha=0.8)
    frame.axes.get_xaxis().set_ticklabels([])
    frame.axes.get_yaxis().set_ticklabels([])
    plt.xlim(0, 1)
    plt.ylim(0, 350)

    frm = plt.subplot(133)
    plt.scatter(s0, c0, color='k', edgecolor='none', s=5, alpha=0.8)
    plt.scatter(s1, c1, color='r', edgecolor='none', s=5, alpha=0.8)
    frame.axes.get_xaxis().set_ticklabels([])
    frame.axes.get_yaxis().set_ticklabels([])
    plt.xlim(0, 4000)
    plt.ylim(0, 350)

    plt.show()


def mutate_screen(parent,
                  current,
                  start,
                  length,
                  merged,
                  new,
                  bins,
                  cutoff,
                  atomtypes,
                  strength,
                  numberofchildren):

    pre_mut(current, start, length, parent, merged)
    # check script, add initial line breaks
    FindMissing(current, start, length)

    state = input('Continue? (y/n) :   ')

    if state == 'y':
        find_rare(current, bins, cutoff)  # print header
        test_plot(parent, current)  # make this plot parent v. current

        state = input('Continue? (y/n) :   ')

        if state == 'y':
            mutate(merged, atomtypes, numberofchildren, strength, bins)
            %mv 4atm * $new
            screen(new, length, start + length)
            print('\n...jobs submitted! Check status with `qstat`.')

        if state == 'n':
            print('rescreen materials above and try again!')

    if state == 'n':
        print('rescreen materials above and try again!')
